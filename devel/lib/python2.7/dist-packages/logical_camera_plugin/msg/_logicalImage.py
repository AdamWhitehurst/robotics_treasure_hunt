# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from logical_camera_plugin/logicalImage.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class logicalImage(genpy.Message):
  _md5sum = "c513e19b80cdf2effbda220ba2ebb388"
  _type = "logical_camera_plugin/logicalImage"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string modelName
float32 pose_pos_x
float32 pose_pos_y
float32 pose_pos_z
float32 pose_rot_x
float32 pose_rot_y
float32 pose_rot_z
float32 pose_rot_w
"""
  __slots__ = ['modelName','pose_pos_x','pose_pos_y','pose_pos_z','pose_rot_x','pose_rot_y','pose_rot_z','pose_rot_w']
  _slot_types = ['string','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       modelName,pose_pos_x,pose_pos_y,pose_pos_z,pose_rot_x,pose_rot_y,pose_rot_z,pose_rot_w

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(logicalImage, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.modelName is None:
        self.modelName = ''
      if self.pose_pos_x is None:
        self.pose_pos_x = 0.
      if self.pose_pos_y is None:
        self.pose_pos_y = 0.
      if self.pose_pos_z is None:
        self.pose_pos_z = 0.
      if self.pose_rot_x is None:
        self.pose_rot_x = 0.
      if self.pose_rot_y is None:
        self.pose_rot_y = 0.
      if self.pose_rot_z is None:
        self.pose_rot_z = 0.
      if self.pose_rot_w is None:
        self.pose_rot_w = 0.
    else:
      self.modelName = ''
      self.pose_pos_x = 0.
      self.pose_pos_y = 0.
      self.pose_pos_z = 0.
      self.pose_rot_x = 0.
      self.pose_rot_y = 0.
      self.pose_rot_z = 0.
      self.pose_rot_w = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.modelName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7f().pack(_x.pose_pos_x, _x.pose_pos_y, _x.pose_pos_z, _x.pose_rot_x, _x.pose_rot_y, _x.pose_rot_z, _x.pose_rot_w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.modelName = str[start:end].decode('utf-8')
      else:
        self.modelName = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.pose_pos_x, _x.pose_pos_y, _x.pose_pos_z, _x.pose_rot_x, _x.pose_rot_y, _x.pose_rot_z, _x.pose_rot_w,) = _get_struct_7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.modelName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7f().pack(_x.pose_pos_x, _x.pose_pos_y, _x.pose_pos_z, _x.pose_rot_x, _x.pose_rot_y, _x.pose_rot_z, _x.pose_rot_w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.modelName = str[start:end].decode('utf-8')
      else:
        self.modelName = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.pose_pos_x, _x.pose_pos_y, _x.pose_pos_z, _x.pose_rot_x, _x.pose_rot_y, _x.pose_rot_z, _x.pose_rot_w,) = _get_struct_7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
